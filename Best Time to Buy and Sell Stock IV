You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.


class Solution {
public:
   int solve(int index,int buy,int cnt,int n,vector<int>& prices,vector<vector<vector<int>>>& dp)
   {
    if(index==n)
    return 0;
    if(cnt==0)
    return 0;

    if(dp[index][buy][cnt]!=-1)
    {
        return dp[index][buy][cnt];
    }
    int profit=0;
    if(buy)
    {
        int pick=-prices[index]+solve(index+1,false,cnt,n,prices,dp);
        int notPick=0+solve(index+1,true,cnt,n,prices,dp);
        profit=max(pick,notPick);
    }
    else
    {
        int pick=prices[index]+solve(index+1,true,cnt-1,n,prices,dp);
        int notPick=0+solve(index+1,false,cnt,n,prices,dp);
        profit=max(pick,notPick);
    }
    return dp[index][buy][cnt]=profit;
   }
    int maxProfit(int k, vector<int>& prices) {
     int n=prices.size();
     vector<vector<vector<int>>>dp(n,vector<vector<int>>(2,vector<int>(k+1,-1))) ;
     return solve(0,true,k,n,prices,dp);
    }
};
